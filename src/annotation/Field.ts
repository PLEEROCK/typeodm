import 'reflect-metadata';
import {defaultMetadataStorage} from "../metadata-builder/MetadataStorage";
import {WrongAnnotationUsageException} from "./exception/WrongAnnotationUsageException";
import {FieldTypeInFunction} from "../metadata-builder/metadata/FieldMetadata";
import {WrongFieldTypeException} from "./exception/WrongFieldTypeException";
import {FieldTypes} from "../metadata-builder/FieldTypes";

/**
 * Field annotation is used to mark a specific class property as a document field. Only document fields will be
 * persisted to the database when document is being saved.
 */
export function Field(typeFunction?: FieldTypeInFunction): Function;
export function Field(name?: string, typeFunction?: FieldTypeInFunction): Function;
export function Field(name?: string|FieldTypeInFunction, typeFunction?: FieldTypeInFunction): Function{
    return function (object: Object, propertyName: string) {
        if (name instanceof Function) {
            typeFunction = <FieldTypeInFunction> name;
            name = null;
        }

        if (!object || !propertyName || !object.constructor)
            throw new WrongAnnotationUsageException('Field', 'class property', object);

        // check only if type is given because otherwise we are trying to guess a type here
        if (typeFunction && !FieldTypes.validateTypeInFunction(typeFunction))
            throw new WrongFieldTypeException(typeFunction, object.constructor.name, propertyName);

        // if type is not given then try to guess it using metadata
        if (!typeFunction)
            typeFunction = () => Reflect.getMetadata('design:type', object, propertyName);

        defaultMetadataStorage.addFieldMetadata({
            object: object,
            name: name ? <string> name : undefined,
            type: typeFunction,
            isId: false,
            isAutoGenerated: false,
            isCreateDate: false,
            isUpdateDate: false,
            isArray: false,
            propertyName: propertyName
        });
    };
}