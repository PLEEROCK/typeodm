import {defaultMetadataStorage} from "../metadata-builder/MetadataStorage";
import {WrongAnnotationUsageError} from "./error/WrongAnnotationUsageError";
import {FieldTypeInFunction} from "../metadata-builder/metadata/FieldMetadata";
import {FieldTypes} from "../metadata-builder/FieldTypes";
import {WrongFieldTypeError} from "./error/WrongFieldTypeError";

/**
 * Same as Field annotation, but used to mark a class properties that contain array data.
 */
export function ArrayField(typeFunction: FieldTypeInFunction): Function;
export function ArrayField(name: string, typeFunction: FieldTypeInFunction): Function;
export function ArrayField(name: string|FieldTypeInFunction, typeFunction?: FieldTypeInFunction): Function {
    return function (object: Object, propertyName: string) {
        if (name instanceof Function) {
            typeFunction = <FieldTypeInFunction> name;
            name = null;
        }

        if (!object || !propertyName || !object.constructor)
            throw new WrongAnnotationUsageError('ArrayField', 'class property', object);

        if (!FieldTypes.validateTypeInFunction(typeFunction))
            throw new WrongFieldTypeError(typeFunction, object.constructor.name, propertyName);

        defaultMetadataStorage.addFieldMetadata({
            object: object,
            name: name ? <string> name : undefined,
            type: typeFunction,
            isId: false,
            isObjectId: false,
            isAutoGenerated: false,
            isCreateDate: false,
            isUpdateDate: false,
            isArray: true,
            propertyName: propertyName
        });
    };
}