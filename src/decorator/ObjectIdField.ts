import 'reflect-metadata';
import {defaultMetadataStorage} from "../metadata-builder/MetadataStorage";
import {WrongAnnotationUsageError} from "./error/WrongAnnotationUsageError";

/**
 * Class property that should contain a document object id must be annotated within this annotation.
 */
export function ObjectIdField(): Function {
    return function (object: Object, propertyName: string) {

        if (!object || !propertyName || !object.constructor)
            throw new WrongAnnotationUsageError('ObjectIdField', 'class property', object);

        const typeFunction = () => Reflect.getMetadata('design:type', object, propertyName);

        defaultMetadataStorage.addFieldMetadata({
            object: object,
            name: undefined,
            type: typeFunction,
            isId: true,
            isObjectId: true,
            isAutoGenerated: false,
            isCreateDate: false,
            isUpdateDate: false,
            isArray: false,
            propertyName: propertyName
        });
    };
}