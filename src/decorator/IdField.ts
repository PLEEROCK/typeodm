import 'reflect-metadata';
import {defaultMetadataStorage} from "../metadata-builder/MetadataStorage";
import {WrongAnnotationUsageError} from "./error/WrongAnnotationUsageError";
import {FieldTypeInFunction} from "../metadata-builder/metadata/FieldMetadata";
import {FieldTypes} from "../metadata-builder/FieldTypes";
import {WrongFieldTypeError} from "./error/WrongFieldTypeError";
import {WrongAutoGeneratedIdFieldTypeError} from "./error/WrongAutoGeneratedIdFieldTypeError";

/**
 * Class property that should contain a document id must be annotated within this annotation.
 */
export function IdField(typeFunction?: FieldTypeInFunction): Function {
    return function (object: Object, propertyName: string) {

        if (!object || !propertyName || !object.constructor)
            throw new WrongAnnotationUsageError('IdField', 'class property', object);

        // check only if type is given because otherwise we are trying to guess a type here
        if (typeFunction && !FieldTypes.validateTypeInFunction(typeFunction))
            throw new WrongFieldTypeError(typeFunction, object.constructor.name, propertyName);

        // if type is not given then try to guess it using metadata
        if (!typeFunction)
            typeFunction = () => Reflect.getMetadata('design:type', object, propertyName);

        // if auto generation set to true then make sure that given type is string, because auto generated value gonna be a string
        /*if (isObjectId === true) {
            let type = typeFunction();
            if (type !== FieldTypes.STRING)
                throw new WrongAutoGeneratedIdFieldTypeError(object, propertyName, type);
        }*/

        defaultMetadataStorage.addFieldMetadata({
            object: object,
            name: undefined,
            type: typeFunction,
            isId: true,
            isObjectId: false,
            isAutoGenerated: false,
            isCreateDate: false,
            isUpdateDate: false,
            isArray: false,
            propertyName: propertyName
        });
    }
}